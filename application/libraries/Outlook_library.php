<?php 

/**
* This libarray is created for setting a company libarary.
* @author Bimal Sharma <sharma.bimal226@gmail.com>
*/

class Outlook_library {

	// creating a variable
	/////// This first one is generated by Amit Singh, instructed by Bimal Sharma /////////
	//protected $authApiId = '6f5ddc7d-4721-4d28-a8ea-d41be4384cbf';
	//protected $authApiPassword = 'DCRAsk6AX/w3ONAdON3sh6tHDObgp/[[';
	//// Currently Created API For Testing by Amit Singh /////////
	protected $authApiId = 'c692fd5e-db7f-4117-bad0-2b1a93793000';
	protected $authApiPassword = 'lNn:QUyM?[:ZmrIz302t9BI-k0l8IYZ/';
	protected $authReDirectUri = 'https://specxnet.com/auth.php';//'https://login.microsoftonline.com/common/oauth2/nativeclient';
	protected $authScoped = 'openid profile offline_access User.Read Mail.Send Mail.Read Mail.ReadWrite Calendars.ReadWrite Calendars.ReadWrite.Shared Calendars.Read.Shared';
	protected $authAuthority = 'https://login.microsoftonline.com/common';
	protected $authAuthorityEndpoint = '/oauth2/v2.0/authorize';
	protected $authTockenEndpoint = '/oauth2/v2.0/token';
	protected $ci = null;	


	public function __construct() {
		$this->ci = & get_instance();	
	}

	public function signin()
	{
  		if (session_status() == PHP_SESSION_NONE) {
    		session_start();
  		}

  		// Initialize the OAuth client
  		$oauthClient = new \League\OAuth2\Client\Provider\GenericProvider([
		    'clientId'                => $this->authApiId,
		    'clientSecret'            => $this->authApiPassword,
		    'redirectUri'             => $this->authReDirectUri,
		    'urlAuthorize'            => $this->authAuthority.$this->authAuthorityEndpoint,
		    'urlAccessToken'          => $this->authAuthority.$this->authTockenEndpoint,
		    'urlResourceOwnerDetails' => '',
		    'scopes'                  => $this->authScoped
  		]);

  		// Generate the auth URL
  		$authorizationUrl = $oauthClient->getAuthorizationUrl();

  		// Save client state so we can validate in response
  		$_SESSION['oauth_state'] = $oauthClient->getState();
  		// Redirect to authorization endpoint
  		header('Location: '.$authorizationUrl);
  		exit();
	}

	public function token($token,$state){
		if (session_status() == PHP_SESSION_NONE) {
    		session_start();
  		}
  		// Authorization code should be in the "code" query param
  		if (isset($token)) {
    		// Check that state matches
    		if(isset($_SESSION['oauth_state'])) {
          if (empty($state) || ($state !== $_SESSION['oauth_state'])) {
            exit('State provided in redirect does not match expected value.');
        }
        }

    		// Clear saved state
    		unset($_SESSION['oauth_state']);

    		// Initialize the OAuth client
    		$oauthClient = new \League\OAuth2\Client\Provider\GenericProvider([
		      	'clientId'                => $this->authApiId,
		      	'clientSecret'            => $this->authApiPassword,
		      	'redirectUri'             => $this->authReDirectUri,
		      	'urlAuthorize'            => $this->authAuthority.$this->authAuthorityEndpoint,
		    	'urlAccessToken'          => $this->authAuthority.$this->authTockenEndpoint,
		      	'urlResourceOwnerDetails' => '',
		      	'scopes'                  => $this->authScoped
    		]);

    		try {
      			// Make the token request

      			$accessToken = $oauthClient->getAccessToken('authorization_code', [
        			'code' => $token
      			]);
      			
      			$this->storeTokens($accessToken->getToken(), $accessToken->getRefreshToken(),$accessToken->getExpires());
      			header('Location: https://specxnet.com/outlook/calender');
      			exit;
    		}
    		catch (League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {
      			exit('ERROR getting tokens: '.$e->getMessage());
    		}
    		exit();
  		}
  		elseif (isset($_GET['error'])) {
    		exit('ERROR: '.$_GET['error'].' - '.$_GET['error_description']);
  		}
	}

	public function storeTokens($access_token, $refresh_token, $expires) {
	    $_SESSION['access_token'] = $access_token;
	    $_SESSION['refresh_token'] = $refresh_token;
	    $_SESSION['token_expires'] = $expires;
  	}

  	public function clearTokens() {
    	unset($_SESSION['access_token']);
    	unset($_SESSION['refresh_token']);
    	unset($_SESSION['token_expires']);
  	}

  	public function getAccessToken() {
    	// Check if tokens exist
    	if (empty($_SESSION['access_token']) ||
        	empty($_SESSION['refresh_token']) ||
        	empty($_SESSION['token_expires'])) {
      		return '';
    	}

    	// Check if token is expired
    	//Get current time + 5 minutes (to allow for time differences)
    	$now = time() + 300;
    	if ($_SESSION['token_expires'] <= $now) {
	      	// Token is expired (or very close to it)
	      	// so let's refresh

	      	// Initialize the OAuth client
	      	$oauthClient = new \League\OAuth2\Client\Provider\GenericProvider([
		        'clientId'                => $this->authApiId,
		      	'clientSecret'            => $this->authApiPassword,
		      	'redirectUri'             => $this->authReDirectUri,
		      	'urlAuthorize'            => $this->authAuthority.$this->authAuthorityEndpoint,
		    	'urlAccessToken'          => $this->authAuthority.$this->authTockenEndpoint,
		      	'urlResourceOwnerDetails' => '',
		      	'scopes'                  => $this->authScoped
	      	]);

	      	try {
	        	$newToken = $oauthClient->getAccessToken('refresh_token', [
	          		'refresh_token' => $_SESSION['refresh_token']
	        	]);

	        	// Store the new values
	        	$this->storeTokens($newToken->getToken(), $newToken->getRefreshToken(),$newToken->getExpires());

	        	return $newToken->getToken();
	      	}
	      	catch (League\OAuth2\Client\Provider\Exception\IdentityProviderException $e) {
	        	return '';
	      	}
	    }
    	else {
      		// Token is still valid, just return it
      		return $_SESSION['access_token'];
    	}
  	}
} 